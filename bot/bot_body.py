from config import *
from keyboards import *
from db_utils import *

from aiogram import Dispatcher, executor, Bot
from aiogram.types import Message, CallbackQuery, InputMedia, LabeledPrice
from aiogram.utils.exceptions import MessageNotModified

bot = Bot(TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.full_name}</b>"
        f"\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ micros"
    )
    await register_user(message)


async def register_user(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    user = db_check_user(chat_id)
    if user:
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await show_main_menu(message)
    else:
        db_register_user(chat_id, full_name)
        await message.answer(
            text="–î–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä",
            reply_markup=share_phone_button()
        )


@dp.message_handler(content_types=['contact'])
async def finish_register(message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    phone = message.contact.phone_number
    db_update_user(chat_id, phone)
    await create_cart_for_user(message)
    await message.answer(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    await show_main_menu(message)


async def create_cart_for_user(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    try:
        db_create_user_cart(chat_id)
    except IntegrityError:
        ...


async def show_main_menu(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, Reply –∫–Ω–æ–ø–∫–∏"""
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=generate_main_menu()
    )


@dp.message_handler(lambda message: '‚úî –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' in message.text)
async def make_order(message: Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É: —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"""
    chat_id = message.chat.id
    await bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–≥–Ω–∞–ª–∏",
        reply_markup=back_to_main_menu()
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_menu(chat_id)
    )


@dp.callback_query_handler(lambda call: 'category_' in call.data)
async def show_product_button(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    category_id = int(call.data.split('_')[-1])
    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=show_product_by_category(category_id)
    )


@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def return_to_category(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=generate_category_menu(chat_id)
    )


@dp.message_handler(regexp=r'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    message_id = message.message_id - 1
    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=message_id
    )
    await show_main_menu(message)


@dp.callback_query_handler(lambda call: 'product_' in call.data)
async def show_choose_product(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(
        chat_id=chat_id,
        message_id=message_id
    )
    product_id = int(call.data.split('_')[-1])
    product_id, name, price, info, image, _ = db_get_product(product_id)

    text = f"{name}\n"
    text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {info}\n"
    text += f"–¶–µ–Ω–∞: {price} —Å—É–º"

    try:
        user_cart_id = db_get_user_cart(chat_id)[0]
        db_update_to_cart(price=price, quantity=1, cart_id=user_cart_id)
        await bot.send_message(
            chat_id=chat_id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
            reply_markup=back_to_menu()
        )
        with open(f'{IMAGE_PATH}{image}', mode='rb') as img:
            await bot.send_photo(
                chat_id=chat_id,
                photo=img,
                caption=text,
                reply_markup=generate_constructor_button(1)
            )

    except TypeError:
        await bot.send_message(
            chat_id=chat_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–º –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=share_phone_button()
        )


@dp.message_handler(regexp=r'‚¨Ö –ù–∞–∑–∞–¥')
async def return_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    message_id = message.message_id - 1
    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=message_id
    )
    await make_order(message)


@dp.callback_query_handler(lambda call: 'action' in call.data)
async def constructor_changes(call: CallbackQuery):
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ + –∏ - –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"""
    chat_id = call.from_user.id
    message_id = call.message.message_id
    action = call.data.split()[-1]
    cart_id, total_price, total_products = db_get_user_cart(chat_id)
    product_name = call.message['caption'].split('\n')[0]
    product_price, product_info, product_image = db_get_product_by_name(product_name)

    match action:
        case '+':
            total_products += 1
            product_price = product_price * total_products
            db_update_to_cart(
                price=product_price,
                quantity=total_products,
                cart_id=cart_id
            )
        case '-':
            if total_products < 2:
                total_products = total_products
                await call.answer('–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–µ–ª—å–∑—è')
            else:
                total_products -= 1

            product_price = product_price * total_products
            db_update_to_cart(
                price=product_price,
                quantity=total_products,
                cart_id=cart_id
            )

    text = f"{product_name}\n"
    text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {product_info}\n"
    text += f"–¶–µ–Ω–∞: {product_price} —Å—É–º"

    try:
        with open(f'{IMAGE_PATH}{product_image}', mode='rb') as img:
            await bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=InputMedia(media=img, caption=text),
                reply_markup=generate_constructor_button(total_products)
            )
    except MessageNotModified:
        ...


@dp.callback_query_handler(lambda call: 'put into cart' in call.data)
async def put_into_cart(call: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É"""
    chat_id = call.from_user.id
    cart_id, total_price, total_products = db_get_user_cart(chat_id)
    product_name = call.message['caption'].split('\n')[0]

    if db_ins_or_upd_finally_cart(cart_id, product_name, total_products, total_price):
        await bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"
        )

    await bot.delete_message(
        chat_id=chat_id,
        message_id=call.message.message_id)
    await return_menu(call.message)


def do_not_repeat_yourself(chat_id, text):
    """–ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart_products = db_get_cart_products(chat_id)
    if not cart_products:
        return None

    text = f'{text}: \n\n'
    total_products = total_price = count = 0
    for name, quantity, price, cart_id in cart_products:
        count += 1
        total_products += quantity
        total_price += price
        text += f'{count}. {name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n\n'

    text += f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: {total_price}'
    context = (count, text, total_price, cart_id)

    return context


@dp.callback_query_handler(regexp=r"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞")
async def show_finally_cart(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message_id = call.message.message_id
    chat_id = call.from_user.id
    await bot.delete_message(
        chat_id=chat_id,
        message_id=message_id
    )
    products = do_not_repeat_yourself(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞')
    if products:
        count, text, *_ = do_not_repeat_yourself(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞')
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=generate_cart_button(chat_id)
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–∞ ü•¥"
        )
        await make_order(call.message)


@dp.callback_query_handler(lambda call: 'delete' in call.data)
async def delete_cart_product(call: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã"""
    finally_id = int(call.data.split('_')[-1])
    db_delete_product(finally_id)
    await bot.answer_callback_query(
        callback_query_id=call.id,
        text="–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    )
    await show_finally_cart(call)


@dp.callback_query_handler(lambda call: 'order_ü§ë' in call.data)
async def create_order(call: CallbackQuery):
    """–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–æ—Ä–∑–∏–Ω—ã"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(
        chat_id=chat_id,
        message_id=message_id
    )

    count, text, price, cart_id = do_not_repeat_yourself(chat_id, '–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã')
    text += "\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É: 10000 —Å—É–º"
    await bot.send_invoice(
        chat_id=chat_id,
        title=f"–í–∞—à –∑–∞–∫–∞–∑",
        description=text,
        payload="bot-defined invoice payload",
        provider_token=PAYME,
        currency='UZS',
        prices=[
            LabeledPrice(label="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", amount=int(price * 100)),
            LabeledPrice(label="–î–æ—Å—Ç–∞–≤–∫–∞", amount=10000 * 100)
        ]
    )

    # TODO –û—Ç—á–µ—Ç –º–∞–Ω–∞–≥–µ—Ä–∞–º
    clear_finally_cart(cart_id)


executor.start_polling(dp)
